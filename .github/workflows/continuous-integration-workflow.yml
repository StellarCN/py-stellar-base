name: GitHub Action

on:
  push:
  pull_request:
    branches-ignore:
      - 'temp*'
      - 'tmp*'
  release:
    types: [ created ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ "3.7", "3.8", "3.9", "3.10", "3.11", "pypy3.7" ]
        # https://endoflife.date/python
    steps:
      - uses: actions/checkout@v3

      - name: Start httpbin server
        run: |
          docker run -d -p 9876:80 kennethreitz/httpbin

      - name: Install poetry
        run: pipx install poetry

      - name: Setup Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Install dependencies
        run: |
          poetry install

      - name: Ensure httpbin server is running
        run: |
          while true; do response=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:9876/get); if [ "$response" = "200" ]; then echo "HTTP 200 OK received"; break; else echo "Retrying..."; sleep 1; fi; done

      - name: Echo installed packages
        run: |
          pip freeze

      - name: Test with pytest
        run: poetry run pytest -v -rs tests --runslow --cov=./ --cov-report=xml

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.7'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  mypy-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'poetry'

      - name: Install dependencies
        run: |
          poetry install

      - name: Run mypy check
        run: |
          poetry run mypy -p stellar_sdk
          poetry run mypy -p tests
          poetry run mypy examples

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry

      - name: Build Packages
        run: poetry build

      - name: Publish distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.test_pypi_api_token }}
          repository_url: https://test.pypi.org/legacy/
